// All valid credit card numbers
const valid1 = [4, 5, 3, 9, 6, 7, 7, 9, 0, 8, 0, 1, 6, 8, 0, 8];
const valid2 = [5, 5, 3, 5, 7, 6, 6, 7, 6, 8, 7, 5, 1, 4, 3, 9];
const valid3 = [3, 7, 1, 6, 1, 2, 0, 1, 9, 9, 8, 5, 2, 3, 6];
const valid4 = [6, 0, 1, 1, 1, 4, 4, 3, 4, 0, 6, 8, 2, 9, 0, 5];
const valid5 = [4, 5, 3, 9, 4, 0, 4, 9, 6, 7, 8, 6, 9, 6, 6, 6];

// All invalid credit card numbers
const invalid1 = [4, 5, 3, 2, 7, 7, 8, 7, 7, 1, 0, 9, 1, 7, 9, 5];
const invalid2 = [5, 7, 9, 5, 5, 9, 3, 3, 9, 2, 1, 3, 4, 6, 4, 3];
const invalid3 = [3, 7, 5, 7, 9, 6, 0, 8, 4, 4, 5, 9, 9, 1, 4];
const invalid4 = [6, 0, 1, 1, 1, 2, 7, 9, 6, 1, 7, 7, 7, 9, 3, 5];
const invalid5 = [5, 3, 8, 2, 0, 1, 9, 7, 7, 2, 8, 8, 3, 8, 5, 4];

// Can be either valid or invalid
const mystery1 = [3, 4, 4, 8, 0, 1, 9, 6, 8, 3, 0, 5, 4, 1, 4];
const mystery2 = [5, 4, 6, 6, 1, 0, 0, 8, 6, 1, 6, 2, 0, 2, 3, 9];
const mystery3 = [6, 0, 1, 1, 3, 7, 7, 0, 2, 0, 9, 6, 2, 6, 5, 6, 2, 0, 3];
const mystery4 = [4, 9, 2, 9, 8, 7, 7, 1, 6, 9, 2, 1, 7, 0, 9, 3];
const mystery5 = [4, 9, 1, 3, 5, 4, 0, 4, 6, 3, 0, 7, 2, 5, 2, 3];

// An array of all the arrays above
const batch = [valid1, valid2, valid3, valid4, valid5, invalid1, invalid2, invalid3, invalid4, invalid5, mystery1, mystery2, mystery3, mystery4, mystery5];


// Add your functions below:


// Validates the Credit Card
function validateCred(array){
let sum = 0;
  let arrayReverse = array.slice().reverse();
  for (let i = 0; i < arrayReverse.length; i++) {
    if (i % 2 === 0) sum += arrayReverse[i];
    else {
      let double = arrayReverse[i] * 2;
      if (double > 9) double -= 9;
      sum += double;
    }
  }
  return sum % 10 === 0;
;
    

//Helper do loop for validateCred function 
do{
  var x = arrayToCheck[i] * 2;
  if (x > 9){
    x -= 9
  }
  i -= 2
  total += x;
}while(i >= 0)

//helper do loop to add the last number and any other number
do{
  var y = arrayToCheck[j];
  j -= 2
  total += y
}while(y >= 0)

let checksum = total % 10;
if (checksum === 0){
   return true // valid card
}
return false // invalid card
}



//list invalid credit cards
function findInvalidCards(creditCardNumbers){
    let invalidCreditCards = [];
    for (let i = 0; i < creditCardNumbers.length-1; i++){
        if (!validateCred(creditCardNumbers[i])){
            invalidCreditCards.push(creditCardNumbers[i]);
        }
    }
    return invalidCreditCards;

}
// list of companies that have mailed out invalidcards 
function idInvalidCardCompanies(creditCard){
    let companiesWithInvalidCards = [];
    for (let i = 0; i < creditCard.length; i++){
        switch (creditCard[i][0]){
            case 3:
                if (!companiesWithInvalidCards.includes('Amex (American Express)')){
                    companiesWithInvalidCards.push('Amex (AmericanExpress)');
                };
                
            case 4:
                if (!companiesWithInvalidCards.includes('Visa')){
                companiesWithInvalidCards.push('Visa');
                }
            case 5:
                if (!companiesWithInvalidCards.includes('Mastercard')){
                companiesWithInvalidCards.push('Mastercard');
                }
            case 6:
                if (!companiesWithInvalidCards.includes('Discover')){
                companiesWithInvalidCards.push('Discover');
                }
            default: 
                'Company not found';
                
        }
            
    }
    
    //return console.log(companiesWithInvalidCards);
    console.log([...new Set(companiesWithInvalidCards)])
}



console.log(validateCred(valid1));

console.log(validateCred(valid2));

console.log(validateCred(valid3));

console.log(validateCred(valid4));

console.log(validateCred(valid5));

console.log(validateCred(invalid1));

console.log(validateCred(invalid2));

console.log(validateCred(invalid3));

console.log(validateCred(mystery4));

idInvalidCardCompanies(findInvalidCards(batch));











